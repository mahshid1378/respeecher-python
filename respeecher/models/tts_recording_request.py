# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TTSRecordingRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent_folder_id': 'str',
        'text': 'str',
        'tts_voice_id': 'str',
        'label': 'str'
    }

    attribute_map = {
        'parent_folder_id': 'parent_folder_id',
        'text': 'text',
        'tts_voice_id': 'tts_voice_id',
        'label': 'label'
    }

    def __init__(self, parent_folder_id=None, text=None, tts_voice_id=None, label=None):  # noqa: E501
        """TTSRecordingRequest - a model defined in Swagger"""  # noqa: E501
        self._parent_folder_id = None
        self._text = None
        self._tts_voice_id = None
        self._label = None
        self.discriminator = None
        if parent_folder_id is not None:
            self.parent_folder_id = parent_folder_id
        if text is not None:
            self.text = text
        if tts_voice_id is not None:
            self.tts_voice_id = tts_voice_id
        if label is not None:
            self.label = label

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this TTSRecordingRequest.  # noqa: E501

        The ID of the parent folder.  # noqa: E501

        :return: The parent_folder_id of this TTSRecordingRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this TTSRecordingRequest.

        The ID of the parent folder.  # noqa: E501

        :param parent_folder_id: The parent_folder_id of this TTSRecordingRequest.  # noqa: E501
        :type: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def text(self):
        """Gets the text of this TTSRecordingRequest.  # noqa: E501

        The text to be converted to speech.  # noqa: E501

        :return: The text of this TTSRecordingRequest.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TTSRecordingRequest.

        The text to be converted to speech.  # noqa: E501

        :param text: The text of this TTSRecordingRequest.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def tts_voice_id(self):
        """Gets the tts_voice_id of this TTSRecordingRequest.  # noqa: E501

        The ID of the TTS voice to be used.  # noqa: E501

        :return: The tts_voice_id of this TTSRecordingRequest.  # noqa: E501
        :rtype: str
        """
        return self._tts_voice_id

    @tts_voice_id.setter
    def tts_voice_id(self, tts_voice_id):
        """Sets the tts_voice_id of this TTSRecordingRequest.

        The ID of the TTS voice to be used.  # noqa: E501

        :param tts_voice_id: The tts_voice_id of this TTSRecordingRequest.  # noqa: E501
        :type: str
        """

        self._tts_voice_id = tts_voice_id

    @property
    def label(self):
        """Gets the label of this TTSRecordingRequest.  # noqa: E501

        A label for the request. (Optional)  # noqa: E501

        :return: The label of this TTSRecordingRequest.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TTSRecordingRequest.

        A label for the request. (Optional)  # noqa: E501

        :param label: The label of this TTSRecordingRequest.  # noqa: E501
        :type: str
        """

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TTSRecordingRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TTSRecordingRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
