# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_id': 'str',
        'conversions': 'list[ConversionDetail]',
        'calibration_id': 'str',
        'use_calibration': 'bool'
    }

    attribute_map = {
        'original_id': 'original_id',
        'conversions': 'conversions',
        'calibration_id': 'calibration_id',
        'use_calibration': 'use_calibration'
    }

    def __init__(self, original_id=None, conversions=None, calibration_id=None, use_calibration=None):  # noqa: E501
        """OrderRequest - a model defined in Swagger"""  # noqa: E501
        self._original_id = None
        self._conversions = None
        self._calibration_id = None
        self._use_calibration = None
        self.discriminator = None
        if original_id is not None:
            self.original_id = original_id
        if conversions is not None:
            self.conversions = conversions
        if calibration_id is not None:
            self.calibration_id = calibration_id
        if use_calibration is not None:
            self.use_calibration = use_calibration

    @property
    def original_id(self):
        """Gets the original_id of this OrderRequest.  # noqa: E501

        The ID of the original recording to create a conversion from.  # noqa: E501

        :return: The original_id of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._original_id

    @original_id.setter
    def original_id(self, original_id):
        """Sets the original_id of this OrderRequest.

        The ID of the original recording to create a conversion from.  # noqa: E501

        :param original_id: The original_id of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._original_id = original_id

    @property
    def conversions(self):
        """Gets the conversions of this OrderRequest.  # noqa: E501


        :return: The conversions of this OrderRequest.  # noqa: E501
        :rtype: list[ConversionDetail]
        """
        return self._conversions

    @conversions.setter
    def conversions(self, conversions):
        """Sets the conversions of this OrderRequest.


        :param conversions: The conversions of this OrderRequest.  # noqa: E501
        :type: list[ConversionDetail]
        """

        self._conversions = conversions

    @property
    def calibration_id(self):
        """Gets the calibration_id of this OrderRequest.  # noqa: E501

        The ID of the calibration to use, if applicable.  # noqa: E501

        :return: The calibration_id of this OrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._calibration_id

    @calibration_id.setter
    def calibration_id(self, calibration_id):
        """Sets the calibration_id of this OrderRequest.

        The ID of the calibration to use, if applicable.  # noqa: E501

        :param calibration_id: The calibration_id of this OrderRequest.  # noqa: E501
        :type: str
        """

        self._calibration_id = calibration_id

    @property
    def use_calibration(self):
        """Gets the use_calibration of this OrderRequest.  # noqa: E501

        Whether to use a specific calibration for the conversion.  # noqa: E501

        :return: The use_calibration of this OrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_calibration

    @use_calibration.setter
    def use_calibration(self, use_calibration):
        """Sets the use_calibration of this OrderRequest.

        Whether to use a specific calibration for the conversion.  # noqa: E501

        :param use_calibration: The use_calibration of this OrderRequest.  # noqa: E501
        :type: bool
        """

        self._use_calibration = use_calibration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
