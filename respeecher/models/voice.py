# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Voice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'owner_id': 'str',
        'name': 'str',
        'slug': 'str',
        'visibility': 'str',
        'species': 'str',
        'artist': 'str',
        'verified_artist': 'bool',
        'gender': 'str',
        'pitch': 'float',
        'age_group': 'str',
        'pitch_group': 'str',
        'nationality': 'str',
        'image_url': 'str',
        'thumbnail_url': 'str',
        'description': 'str',
        'rating': 'int',
        'active': 'bool',
        'created_at': 'datetime',
        'favorite': 'bool',
        'available': 'bool',
        'accents': 'list[Accent]',
        'narration_styles': 'list[object]',
        'tiers': 'list[Tier]'
    }

    attribute_map = {
        'id': 'id',
        'owner_id': 'owner_id',
        'name': 'name',
        'slug': 'slug',
        'visibility': 'visibility',
        'species': 'species',
        'artist': 'artist',
        'verified_artist': 'verified_artist',
        'gender': 'gender',
        'pitch': 'pitch',
        'age_group': 'age_group',
        'pitch_group': 'pitch_group',
        'nationality': 'nationality',
        'image_url': 'image_url',
        'thumbnail_url': 'thumbnail_url',
        'description': 'description',
        'rating': 'rating',
        'active': 'active',
        'created_at': 'created_at',
        'favorite': 'favorite',
        'available': 'available',
        'accents': 'accents',
        'narration_styles': 'narration_styles',
        'tiers': 'tiers'
    }

    def __init__(self, id=None, owner_id=None, name=None, slug=None, visibility=None, species=None, artist=None, verified_artist=None, gender=None, pitch=None, age_group=None, pitch_group=None, nationality=None, image_url=None, thumbnail_url=None, description=None, rating=None, active=None, created_at=None, favorite=None, available=None, accents=None, narration_styles=None, tiers=None):  # noqa: E501
        """Voice - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._owner_id = None
        self._name = None
        self._slug = None
        self._visibility = None
        self._species = None
        self._artist = None
        self._verified_artist = None
        self._gender = None
        self._pitch = None
        self._age_group = None
        self._pitch_group = None
        self._nationality = None
        self._image_url = None
        self._thumbnail_url = None
        self._description = None
        self._rating = None
        self._active = None
        self._created_at = None
        self._favorite = None
        self._available = None
        self._accents = None
        self._narration_styles = None
        self._tiers = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if owner_id is not None:
            self.owner_id = owner_id
        if name is not None:
            self.name = name
        if slug is not None:
            self.slug = slug
        if visibility is not None:
            self.visibility = visibility
        if species is not None:
            self.species = species
        if artist is not None:
            self.artist = artist
        if verified_artist is not None:
            self.verified_artist = verified_artist
        if gender is not None:
            self.gender = gender
        if pitch is not None:
            self.pitch = pitch
        if age_group is not None:
            self.age_group = age_group
        if pitch_group is not None:
            self.pitch_group = pitch_group
        if nationality is not None:
            self.nationality = nationality
        if image_url is not None:
            self.image_url = image_url
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url
        if description is not None:
            self.description = description
        if rating is not None:
            self.rating = rating
        if active is not None:
            self.active = active
        if created_at is not None:
            self.created_at = created_at
        if favorite is not None:
            self.favorite = favorite
        if available is not None:
            self.available = available
        if accents is not None:
            self.accents = accents
        if narration_styles is not None:
            self.narration_styles = narration_styles
        if tiers is not None:
            self.tiers = tiers

    @property
    def id(self):
        """Gets the id of this Voice.  # noqa: E501


        :return: The id of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Voice.


        :param id: The id of this Voice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def owner_id(self):
        """Gets the owner_id of this Voice.  # noqa: E501


        :return: The owner_id of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Voice.


        :param owner_id: The owner_id of this Voice.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def name(self):
        """Gets the name of this Voice.  # noqa: E501


        :return: The name of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Voice.


        :param name: The name of this Voice.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this Voice.  # noqa: E501


        :return: The slug of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Voice.


        :param slug: The slug of this Voice.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def visibility(self):
        """Gets the visibility of this Voice.  # noqa: E501


        :return: The visibility of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Voice.


        :param visibility: The visibility of this Voice.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    @property
    def species(self):
        """Gets the species of this Voice.  # noqa: E501


        :return: The species of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this Voice.


        :param species: The species of this Voice.  # noqa: E501
        :type: str
        """

        self._species = species

    @property
    def artist(self):
        """Gets the artist of this Voice.  # noqa: E501


        :return: The artist of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._artist

    @artist.setter
    def artist(self, artist):
        """Sets the artist of this Voice.


        :param artist: The artist of this Voice.  # noqa: E501
        :type: str
        """

        self._artist = artist

    @property
    def verified_artist(self):
        """Gets the verified_artist of this Voice.  # noqa: E501


        :return: The verified_artist of this Voice.  # noqa: E501
        :rtype: bool
        """
        return self._verified_artist

    @verified_artist.setter
    def verified_artist(self, verified_artist):
        """Sets the verified_artist of this Voice.


        :param verified_artist: The verified_artist of this Voice.  # noqa: E501
        :type: bool
        """

        self._verified_artist = verified_artist

    @property
    def gender(self):
        """Gets the gender of this Voice.  # noqa: E501


        :return: The gender of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Voice.


        :param gender: The gender of this Voice.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def pitch(self):
        """Gets the pitch of this Voice.  # noqa: E501


        :return: The pitch of this Voice.  # noqa: E501
        :rtype: float
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this Voice.


        :param pitch: The pitch of this Voice.  # noqa: E501
        :type: float
        """

        self._pitch = pitch

    @property
    def age_group(self):
        """Gets the age_group of this Voice.  # noqa: E501


        :return: The age_group of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._age_group

    @age_group.setter
    def age_group(self, age_group):
        """Sets the age_group of this Voice.


        :param age_group: The age_group of this Voice.  # noqa: E501
        :type: str
        """

        self._age_group = age_group

    @property
    def pitch_group(self):
        """Gets the pitch_group of this Voice.  # noqa: E501


        :return: The pitch_group of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._pitch_group

    @pitch_group.setter
    def pitch_group(self, pitch_group):
        """Sets the pitch_group of this Voice.


        :param pitch_group: The pitch_group of this Voice.  # noqa: E501
        :type: str
        """

        self._pitch_group = pitch_group

    @property
    def nationality(self):
        """Gets the nationality of this Voice.  # noqa: E501


        :return: The nationality of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Voice.


        :param nationality: The nationality of this Voice.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def image_url(self):
        """Gets the image_url of this Voice.  # noqa: E501


        :return: The image_url of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Voice.


        :param image_url: The image_url of this Voice.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this Voice.  # noqa: E501


        :return: The thumbnail_url of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this Voice.


        :param thumbnail_url: The thumbnail_url of this Voice.  # noqa: E501
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def description(self):
        """Gets the description of this Voice.  # noqa: E501


        :return: The description of this Voice.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Voice.


        :param description: The description of this Voice.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def rating(self):
        """Gets the rating of this Voice.  # noqa: E501


        :return: The rating of this Voice.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Voice.


        :param rating: The rating of this Voice.  # noqa: E501
        :type: int
        """

        self._rating = rating

    @property
    def active(self):
        """Gets the active of this Voice.  # noqa: E501


        :return: The active of this Voice.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Voice.


        :param active: The active of this Voice.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def created_at(self):
        """Gets the created_at of this Voice.  # noqa: E501


        :return: The created_at of this Voice.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Voice.


        :param created_at: The created_at of this Voice.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def favorite(self):
        """Gets the favorite of this Voice.  # noqa: E501


        :return: The favorite of this Voice.  # noqa: E501
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """Sets the favorite of this Voice.


        :param favorite: The favorite of this Voice.  # noqa: E501
        :type: bool
        """

        self._favorite = favorite

    @property
    def available(self):
        """Gets the available of this Voice.  # noqa: E501


        :return: The available of this Voice.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Voice.


        :param available: The available of this Voice.  # noqa: E501
        :type: bool
        """

        self._available = available

    @property
    def accents(self):
        """Gets the accents of this Voice.  # noqa: E501


        :return: The accents of this Voice.  # noqa: E501
        :rtype: list[Accent]
        """
        return self._accents

    @accents.setter
    def accents(self, accents):
        """Sets the accents of this Voice.


        :param accents: The accents of this Voice.  # noqa: E501
        :type: list[Accent]
        """

        self._accents = accents

    @property
    def narration_styles(self):
        """Gets the narration_styles of this Voice.  # noqa: E501


        :return: The narration_styles of this Voice.  # noqa: E501
        :rtype: list[object]
        """
        return self._narration_styles

    @narration_styles.setter
    def narration_styles(self, narration_styles):
        """Sets the narration_styles of this Voice.


        :param narration_styles: The narration_styles of this Voice.  # noqa: E501
        :type: list[object]
        """

        self._narration_styles = narration_styles

    @property
    def tiers(self):
        """Gets the tiers of this Voice.  # noqa: E501


        :return: The tiers of this Voice.  # noqa: E501
        :rtype: list[Tier]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """Sets the tiers of this Voice.


        :param tiers: The tiers of this Voice.  # noqa: E501
        :type: list[Tier]
        """

        self._tiers = tiers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Voice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Voice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
