# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'slug': 'str',
        'owner': 'str',
        'url': 'str',
        'models': 'object',
        'id': 'str',
        'active': 'bool',
        'created_at': 'datetime',
        'last_recording_at': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'slug': 'slug',
        'owner': 'owner',
        'url': 'url',
        'models': 'models',
        'id': 'id',
        'active': 'active',
        'created_at': 'created_at',
        'last_recording_at': 'last_recording_at'
    }

    def __init__(self, name=None, slug=None, owner=None, url=None, models=None, id=None, active=None, created_at=None, last_recording_at=None):  # noqa: E501
        """ProjectResponse - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._slug = None
        self._owner = None
        self._url = None
        self._models = None
        self._id = None
        self._active = None
        self._created_at = None
        self._last_recording_at = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if slug is not None:
            self.slug = slug
        if owner is not None:
            self.owner = owner
        if url is not None:
            self.url = url
        if models is not None:
            self.models = models
        if id is not None:
            self.id = id
        if active is not None:
            self.active = active
        if created_at is not None:
            self.created_at = created_at
        if last_recording_at is not None:
            self.last_recording_at = last_recording_at

    @property
    def name(self):
        """Gets the name of this ProjectResponse.  # noqa: E501


        :return: The name of this ProjectResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectResponse.


        :param name: The name of this ProjectResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this ProjectResponse.  # noqa: E501


        :return: The slug of this ProjectResponse.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ProjectResponse.


        :param slug: The slug of this ProjectResponse.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def owner(self):
        """Gets the owner of this ProjectResponse.  # noqa: E501


        :return: The owner of this ProjectResponse.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ProjectResponse.


        :param owner: The owner of this ProjectResponse.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def url(self):
        """Gets the url of this ProjectResponse.  # noqa: E501


        :return: The url of this ProjectResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProjectResponse.


        :param url: The url of this ProjectResponse.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def models(self):
        """Gets the models of this ProjectResponse.  # noqa: E501


        :return: The models of this ProjectResponse.  # noqa: E501
        :rtype: object
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this ProjectResponse.


        :param models: The models of this ProjectResponse.  # noqa: E501
        :type: object
        """

        self._models = models

    @property
    def id(self):
        """Gets the id of this ProjectResponse.  # noqa: E501


        :return: The id of this ProjectResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectResponse.


        :param id: The id of this ProjectResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def active(self):
        """Gets the active of this ProjectResponse.  # noqa: E501


        :return: The active of this ProjectResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ProjectResponse.


        :param active: The active of this ProjectResponse.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def created_at(self):
        """Gets the created_at of this ProjectResponse.  # noqa: E501


        :return: The created_at of this ProjectResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProjectResponse.


        :param created_at: The created_at of this ProjectResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_recording_at(self):
        """Gets the last_recording_at of this ProjectResponse.  # noqa: E501


        :return: The last_recording_at of this ProjectResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_recording_at

    @last_recording_at.setter
    def last_recording_at(self, last_recording_at):
        """Sets the last_recording_at of this ProjectResponse.


        :param last_recording_at: The last_recording_at of this ProjectResponse.  # noqa: E501
        :type: datetime
        """

        self._last_recording_at = last_recording_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
