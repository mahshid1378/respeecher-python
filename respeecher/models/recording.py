# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Recording(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'project_id': 'str',
        'parent_folder_id': 'str',
        'type': 'str',
        'url': 'str',
        'waveform_url': 'str',
        'file_name': 'str',
        'label': 'str',
        'state': 'str',
        'original_id': 'str',
        'model_id': 'str',
        'model_name': 'str',
        'voice_id': 'str',
        'voice_name': 'str',
        'accent_id': 'str',
        'accent_name': 'str',
        'narration_style_id': 'str',
        'narration_style_name': 'str',
        'semitones_correction': 'float',
        'calibration_id': 'str',
        'calibration_value': 'str',
        'calibration_name': 'str',
        'microphone': 'str',
        'size': 'int',
        'duration': 'float',
        'starred': 'bool',
        'tts': 'bool',
        'tts_voice': 'str',
        'tts_voice_id': 'str',
        'text': 'str',
        'params': 'dict(str, object)',
        'error': 'str',
        'active': 'bool',
        'created_at': 'datetime',
        'converted_at': 'datetime',
        'listen_count': 'int',
        'process_stage': 'str',
        'note': 'str',
        'transaction_id': 'str',
        'moderation': 'RecordingModeration'
    }

    attribute_map = {
        'id': 'id',
        'project_id': 'project_id',
        'parent_folder_id': 'parent_folder_id',
        'type': 'type',
        'url': 'url',
        'waveform_url': 'waveform_url',
        'file_name': 'file_name',
        'label': 'label',
        'state': 'state',
        'original_id': 'original_id',
        'model_id': 'model_id',
        'model_name': 'model_name',
        'voice_id': 'voice_id',
        'voice_name': 'voice_name',
        'accent_id': 'accent_id',
        'accent_name': 'accent_name',
        'narration_style_id': 'narration_style_id',
        'narration_style_name': 'narration_style_name',
        'semitones_correction': 'semitones_correction',
        'calibration_id': 'calibration_id',
        'calibration_value': 'calibration_value',
        'calibration_name': 'calibration_name',
        'microphone': 'microphone',
        'size': 'size',
        'duration': 'duration',
        'starred': 'starred',
        'tts': 'tts',
        'tts_voice': 'tts_voice',
        'tts_voice_id': 'tts_voice_id',
        'text': 'text',
        'params': 'params',
        'error': 'error',
        'active': 'active',
        'created_at': 'created_at',
        'converted_at': 'converted_at',
        'listen_count': 'listen_count',
        'process_stage': 'process_stage',
        'note': 'note',
        'transaction_id': 'transaction_id',
        'moderation': 'moderation'
    }

    def __init__(self, id=None, project_id=None, parent_folder_id=None, type=None, url=None, waveform_url=None, file_name=None, label=None, state=None, original_id=None, model_id=None, model_name=None, voice_id=None, voice_name=None, accent_id=None, accent_name=None, narration_style_id=None, narration_style_name=None, semitones_correction=None, calibration_id=None, calibration_value=None, calibration_name=None, microphone=None, size=None, duration=None, starred=None, tts=None, tts_voice=None, tts_voice_id=None, text=None, params=None, error=None, active=None, created_at=None, converted_at=None, listen_count=None, process_stage=None, note=None, transaction_id=None, moderation=None):  # noqa: E501
        """Recording - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._project_id = None
        self._parent_folder_id = None
        self._type = None
        self._url = None
        self._waveform_url = None
        self._file_name = None
        self._label = None
        self._state = None
        self._original_id = None
        self._model_id = None
        self._model_name = None
        self._voice_id = None
        self._voice_name = None
        self._accent_id = None
        self._accent_name = None
        self._narration_style_id = None
        self._narration_style_name = None
        self._semitones_correction = None
        self._calibration_id = None
        self._calibration_value = None
        self._calibration_name = None
        self._microphone = None
        self._size = None
        self._duration = None
        self._starred = None
        self._tts = None
        self._tts_voice = None
        self._tts_voice_id = None
        self._text = None
        self._params = None
        self._error = None
        self._active = None
        self._created_at = None
        self._converted_at = None
        self._listen_count = None
        self._process_stage = None
        self._note = None
        self._transaction_id = None
        self._moderation = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if parent_folder_id is not None:
            self.parent_folder_id = parent_folder_id
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if waveform_url is not None:
            self.waveform_url = waveform_url
        if file_name is not None:
            self.file_name = file_name
        if label is not None:
            self.label = label
        if state is not None:
            self.state = state
        if original_id is not None:
            self.original_id = original_id
        if model_id is not None:
            self.model_id = model_id
        if model_name is not None:
            self.model_name = model_name
        if voice_id is not None:
            self.voice_id = voice_id
        if voice_name is not None:
            self.voice_name = voice_name
        if accent_id is not None:
            self.accent_id = accent_id
        if accent_name is not None:
            self.accent_name = accent_name
        if narration_style_id is not None:
            self.narration_style_id = narration_style_id
        if narration_style_name is not None:
            self.narration_style_name = narration_style_name
        if semitones_correction is not None:
            self.semitones_correction = semitones_correction
        if calibration_id is not None:
            self.calibration_id = calibration_id
        if calibration_value is not None:
            self.calibration_value = calibration_value
        if calibration_name is not None:
            self.calibration_name = calibration_name
        if microphone is not None:
            self.microphone = microphone
        if size is not None:
            self.size = size
        if duration is not None:
            self.duration = duration
        if starred is not None:
            self.starred = starred
        if tts is not None:
            self.tts = tts
        if tts_voice is not None:
            self.tts_voice = tts_voice
        if tts_voice_id is not None:
            self.tts_voice_id = tts_voice_id
        if text is not None:
            self.text = text
        if params is not None:
            self.params = params
        if error is not None:
            self.error = error
        if active is not None:
            self.active = active
        if created_at is not None:
            self.created_at = created_at
        if converted_at is not None:
            self.converted_at = converted_at
        if listen_count is not None:
            self.listen_count = listen_count
        if process_stage is not None:
            self.process_stage = process_stage
        if note is not None:
            self.note = note
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if moderation is not None:
            self.moderation = moderation

    @property
    def id(self):
        """Gets the id of this Recording.  # noqa: E501

        Unique identifier for the recording.  # noqa: E501

        :return: The id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Recording.

        Unique identifier for the recording.  # noqa: E501

        :param id: The id of this Recording.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this Recording.  # noqa: E501

        The project identifier this recording belongs to.  # noqa: E501

        :return: The project_id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Recording.

        The project identifier this recording belongs to.  # noqa: E501

        :param project_id: The project_id of this Recording.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this Recording.  # noqa: E501

        The folder identifier in which this recording is stored.  # noqa: E501

        :return: The parent_folder_id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this Recording.

        The folder identifier in which this recording is stored.  # noqa: E501

        :param parent_folder_id: The parent_folder_id of this Recording.  # noqa: E501
        :type: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def type(self):
        """Gets the type of this Recording.  # noqa: E501

        The type of recording.  # noqa: E501

        :return: The type of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Recording.

        The type of recording.  # noqa: E501

        :param type: The type of this Recording.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this Recording.  # noqa: E501

        The URL to access the recording.  # noqa: E501

        :return: The url of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Recording.

        The URL to access the recording.  # noqa: E501

        :param url: The url of this Recording.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def waveform_url(self):
        """Gets the waveform_url of this Recording.  # noqa: E501

        The URL to access the waveform of the recording.  # noqa: E501

        :return: The waveform_url of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._waveform_url

    @waveform_url.setter
    def waveform_url(self, waveform_url):
        """Sets the waveform_url of this Recording.

        The URL to access the waveform of the recording.  # noqa: E501

        :param waveform_url: The waveform_url of this Recording.  # noqa: E501
        :type: str
        """

        self._waveform_url = waveform_url

    @property
    def file_name(self):
        """Gets the file_name of this Recording.  # noqa: E501

        The name of the recording file.  # noqa: E501

        :return: The file_name of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Recording.

        The name of the recording file.  # noqa: E501

        :param file_name: The file_name of this Recording.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def label(self):
        """Gets the label of this Recording.  # noqa: E501

        A label for the recording.  # noqa: E501

        :return: The label of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Recording.

        A label for the recording.  # noqa: E501

        :param label: The label of this Recording.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def state(self):
        """Gets the state of this Recording.  # noqa: E501

        The state of the recording.  # noqa: E501

        :return: The state of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Recording.

        The state of the recording.  # noqa: E501

        :param state: The state of this Recording.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def original_id(self):
        """Gets the original_id of this Recording.  # noqa: E501

        Identifier for the original recording.  # noqa: E501

        :return: The original_id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._original_id

    @original_id.setter
    def original_id(self, original_id):
        """Sets the original_id of this Recording.

        Identifier for the original recording.  # noqa: E501

        :param original_id: The original_id of this Recording.  # noqa: E501
        :type: str
        """

        self._original_id = original_id

    @property
    def model_id(self):
        """Gets the model_id of this Recording.  # noqa: E501

        The model identifier used for the recording.  # noqa: E501

        :return: The model_id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this Recording.

        The model identifier used for the recording.  # noqa: E501

        :param model_id: The model_id of this Recording.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def model_name(self):
        """Gets the model_name of this Recording.  # noqa: E501

        The name of the model used.  # noqa: E501

        :return: The model_name of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this Recording.

        The name of the model used.  # noqa: E501

        :param model_name: The model_name of this Recording.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def voice_id(self):
        """Gets the voice_id of this Recording.  # noqa: E501

        The voice identifier used for the recording.  # noqa: E501

        :return: The voice_id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this Recording.

        The voice identifier used for the recording.  # noqa: E501

        :param voice_id: The voice_id of this Recording.  # noqa: E501
        :type: str
        """

        self._voice_id = voice_id

    @property
    def voice_name(self):
        """Gets the voice_name of this Recording.  # noqa: E501

        The name of the voice used.  # noqa: E501

        :return: The voice_name of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._voice_name

    @voice_name.setter
    def voice_name(self, voice_name):
        """Sets the voice_name of this Recording.

        The name of the voice used.  # noqa: E501

        :param voice_name: The voice_name of this Recording.  # noqa: E501
        :type: str
        """

        self._voice_name = voice_name

    @property
    def accent_id(self):
        """Gets the accent_id of this Recording.  # noqa: E501

        The accent identifier used for the recording.  # noqa: E501

        :return: The accent_id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._accent_id

    @accent_id.setter
    def accent_id(self, accent_id):
        """Sets the accent_id of this Recording.

        The accent identifier used for the recording.  # noqa: E501

        :param accent_id: The accent_id of this Recording.  # noqa: E501
        :type: str
        """

        self._accent_id = accent_id

    @property
    def accent_name(self):
        """Gets the accent_name of this Recording.  # noqa: E501

        The name of the accent used.  # noqa: E501

        :return: The accent_name of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._accent_name

    @accent_name.setter
    def accent_name(self, accent_name):
        """Sets the accent_name of this Recording.

        The name of the accent used.  # noqa: E501

        :param accent_name: The accent_name of this Recording.  # noqa: E501
        :type: str
        """

        self._accent_name = accent_name

    @property
    def narration_style_id(self):
        """Gets the narration_style_id of this Recording.  # noqa: E501

        The narration style identifier used for the recording.  # noqa: E501

        :return: The narration_style_id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._narration_style_id

    @narration_style_id.setter
    def narration_style_id(self, narration_style_id):
        """Sets the narration_style_id of this Recording.

        The narration style identifier used for the recording.  # noqa: E501

        :param narration_style_id: The narration_style_id of this Recording.  # noqa: E501
        :type: str
        """

        self._narration_style_id = narration_style_id

    @property
    def narration_style_name(self):
        """Gets the narration_style_name of this Recording.  # noqa: E501

        The name of the narration style used.  # noqa: E501

        :return: The narration_style_name of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._narration_style_name

    @narration_style_name.setter
    def narration_style_name(self, narration_style_name):
        """Sets the narration_style_name of this Recording.

        The name of the narration style used.  # noqa: E501

        :param narration_style_name: The narration_style_name of this Recording.  # noqa: E501
        :type: str
        """

        self._narration_style_name = narration_style_name

    @property
    def semitones_correction(self):
        """Gets the semitones_correction of this Recording.  # noqa: E501

        Semitones correction applied to the recording.  # noqa: E501

        :return: The semitones_correction of this Recording.  # noqa: E501
        :rtype: float
        """
        return self._semitones_correction

    @semitones_correction.setter
    def semitones_correction(self, semitones_correction):
        """Sets the semitones_correction of this Recording.

        Semitones correction applied to the recording.  # noqa: E501

        :param semitones_correction: The semitones_correction of this Recording.  # noqa: E501
        :type: float
        """

        self._semitones_correction = semitones_correction

    @property
    def calibration_id(self):
        """Gets the calibration_id of this Recording.  # noqa: E501

        The calibration identifier used for the recording.  # noqa: E501

        :return: The calibration_id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._calibration_id

    @calibration_id.setter
    def calibration_id(self, calibration_id):
        """Sets the calibration_id of this Recording.

        The calibration identifier used for the recording.  # noqa: E501

        :param calibration_id: The calibration_id of this Recording.  # noqa: E501
        :type: str
        """

        self._calibration_id = calibration_id

    @property
    def calibration_value(self):
        """Gets the calibration_value of this Recording.  # noqa: E501

        The calibration value used.  # noqa: E501

        :return: The calibration_value of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._calibration_value

    @calibration_value.setter
    def calibration_value(self, calibration_value):
        """Sets the calibration_value of this Recording.

        The calibration value used.  # noqa: E501

        :param calibration_value: The calibration_value of this Recording.  # noqa: E501
        :type: str
        """

        self._calibration_value = calibration_value

    @property
    def calibration_name(self):
        """Gets the calibration_name of this Recording.  # noqa: E501

        The name of the calibration used.  # noqa: E501

        :return: The calibration_name of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._calibration_name

    @calibration_name.setter
    def calibration_name(self, calibration_name):
        """Sets the calibration_name of this Recording.

        The name of the calibration used.  # noqa: E501

        :param calibration_name: The calibration_name of this Recording.  # noqa: E501
        :type: str
        """

        self._calibration_name = calibration_name

    @property
    def microphone(self):
        """Gets the microphone of this Recording.  # noqa: E501

        The microphone used for the recording.  # noqa: E501

        :return: The microphone of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._microphone

    @microphone.setter
    def microphone(self, microphone):
        """Sets the microphone of this Recording.

        The microphone used for the recording.  # noqa: E501

        :param microphone: The microphone of this Recording.  # noqa: E501
        :type: str
        """

        self._microphone = microphone

    @property
    def size(self):
        """Gets the size of this Recording.  # noqa: E501

        The size of the recording file in bytes.  # noqa: E501

        :return: The size of this Recording.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Recording.

        The size of the recording file in bytes.  # noqa: E501

        :param size: The size of this Recording.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def duration(self):
        """Gets the duration of this Recording.  # noqa: E501

        The duration of the recording in seconds.  # noqa: E501

        :return: The duration of this Recording.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Recording.

        The duration of the recording in seconds.  # noqa: E501

        :param duration: The duration of this Recording.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def starred(self):
        """Gets the starred of this Recording.  # noqa: E501

        Indicates if the recording is marked as favorite.  # noqa: E501

        :return: The starred of this Recording.  # noqa: E501
        :rtype: bool
        """
        return self._starred

    @starred.setter
    def starred(self, starred):
        """Sets the starred of this Recording.

        Indicates if the recording is marked as favorite.  # noqa: E501

        :param starred: The starred of this Recording.  # noqa: E501
        :type: bool
        """

        self._starred = starred

    @property
    def tts(self):
        """Gets the tts of this Recording.  # noqa: E501

        Indicates if the recording is synthesized from text.  # noqa: E501

        :return: The tts of this Recording.  # noqa: E501
        :rtype: bool
        """
        return self._tts

    @tts.setter
    def tts(self, tts):
        """Sets the tts of this Recording.

        Indicates if the recording is synthesized from text.  # noqa: E501

        :param tts: The tts of this Recording.  # noqa: E501
        :type: bool
        """

        self._tts = tts

    @property
    def tts_voice(self):
        """Gets the tts_voice of this Recording.  # noqa: E501

        The TTS voice used for the recording.  # noqa: E501

        :return: The tts_voice of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._tts_voice

    @tts_voice.setter
    def tts_voice(self, tts_voice):
        """Sets the tts_voice of this Recording.

        The TTS voice used for the recording.  # noqa: E501

        :param tts_voice: The tts_voice of this Recording.  # noqa: E501
        :type: str
        """

        self._tts_voice = tts_voice

    @property
    def tts_voice_id(self):
        """Gets the tts_voice_id of this Recording.  # noqa: E501

        The TTS voice identifier used for the recording.  # noqa: E501

        :return: The tts_voice_id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._tts_voice_id

    @tts_voice_id.setter
    def tts_voice_id(self, tts_voice_id):
        """Sets the tts_voice_id of this Recording.

        The TTS voice identifier used for the recording.  # noqa: E501

        :param tts_voice_id: The tts_voice_id of this Recording.  # noqa: E501
        :type: str
        """

        self._tts_voice_id = tts_voice_id

    @property
    def text(self):
        """Gets the text of this Recording.  # noqa: E501

        The text content of the TTS recording.  # noqa: E501

        :return: The text of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Recording.

        The text content of the TTS recording.  # noqa: E501

        :param text: The text of this Recording.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def params(self):
        """Gets the params of this Recording.  # noqa: E501

        Additional parameters for the recording.  # noqa: E501

        :return: The params of this Recording.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Recording.

        Additional parameters for the recording.  # noqa: E501

        :param params: The params of this Recording.  # noqa: E501
        :type: dict(str, object)
        """

        self._params = params

    @property
    def error(self):
        """Gets the error of this Recording.  # noqa: E501

        Any error message associated with the recording.  # noqa: E501

        :return: The error of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Recording.

        Any error message associated with the recording.  # noqa: E501

        :param error: The error of this Recording.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def active(self):
        """Gets the active of this Recording.  # noqa: E501

        Indicates if the recording is active.  # noqa: E501

        :return: The active of this Recording.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Recording.

        Indicates if the recording is active.  # noqa: E501

        :param active: The active of this Recording.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def created_at(self):
        """Gets the created_at of this Recording.  # noqa: E501

        The creation date and time of the recording.  # noqa: E501

        :return: The created_at of this Recording.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Recording.

        The creation date and time of the recording.  # noqa: E501

        :param created_at: The created_at of this Recording.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def converted_at(self):
        """Gets the converted_at of this Recording.  # noqa: E501

        The date and time when the recording was converted.  # noqa: E501

        :return: The converted_at of this Recording.  # noqa: E501
        :rtype: datetime
        """
        return self._converted_at

    @converted_at.setter
    def converted_at(self, converted_at):
        """Sets the converted_at of this Recording.

        The date and time when the recording was converted.  # noqa: E501

        :param converted_at: The converted_at of this Recording.  # noqa: E501
        :type: datetime
        """

        self._converted_at = converted_at

    @property
    def listen_count(self):
        """Gets the listen_count of this Recording.  # noqa: E501

        The number of times the recording has been played.  # noqa: E501

        :return: The listen_count of this Recording.  # noqa: E501
        :rtype: int
        """
        return self._listen_count

    @listen_count.setter
    def listen_count(self, listen_count):
        """Sets the listen_count of this Recording.

        The number of times the recording has been played.  # noqa: E501

        :param listen_count: The listen_count of this Recording.  # noqa: E501
        :type: int
        """

        self._listen_count = listen_count

    @property
    def process_stage(self):
        """Gets the process_stage of this Recording.  # noqa: E501

        The current processing stage of the recording.  # noqa: E501

        :return: The process_stage of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._process_stage

    @process_stage.setter
    def process_stage(self, process_stage):
        """Sets the process_stage of this Recording.

        The current processing stage of the recording.  # noqa: E501

        :param process_stage: The process_stage of this Recording.  # noqa: E501
        :type: str
        """

        self._process_stage = process_stage

    @property
    def note(self):
        """Gets the note of this Recording.  # noqa: E501

        An optional note about the recording.  # noqa: E501

        :return: The note of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Recording.

        An optional note about the recording.  # noqa: E501

        :param note: The note of this Recording.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Recording.  # noqa: E501

        The transaction identifier associated with the recording.  # noqa: E501

        :return: The transaction_id of this Recording.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Recording.

        The transaction identifier associated with the recording.  # noqa: E501

        :param transaction_id: The transaction_id of this Recording.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def moderation(self):
        """Gets the moderation of this Recording.  # noqa: E501


        :return: The moderation of this Recording.  # noqa: E501
        :rtype: RecordingModeration
        """
        return self._moderation

    @moderation.setter
    def moderation(self, moderation):
        """Sets the moderation of this Recording.


        :param moderation: The moderation of this Recording.  # noqa: E501
        :type: RecordingModeration
        """

        self._moderation = moderation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Recording, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recording):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
