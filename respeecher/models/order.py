# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'original_id': 'str',
        'conversion_id': 'str',
        'transaction_id': 'str',
        'moderation_id': 'str',
        'calibration_id': 'str',
        'tracking_id': 'str',
        'f0': 'float',
        'state': 'str',
        'created_at': 'datetime',
        'closed_at': 'datetime',
        'error': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'user_id',
        'original_id': 'original_id',
        'conversion_id': 'conversion_id',
        'transaction_id': 'transaction_id',
        'moderation_id': 'moderation_id',
        'calibration_id': 'calibration_id',
        'tracking_id': 'tracking_id',
        'f0': 'f0',
        'state': 'state',
        'created_at': 'created_at',
        'closed_at': 'closed_at',
        'error': 'error'
    }

    def __init__(self, id=None, user_id=None, original_id=None, conversion_id=None, transaction_id=None, moderation_id=None, calibration_id=None, tracking_id=None, f0=None, state=None, created_at=None, closed_at=None, error=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._original_id = None
        self._conversion_id = None
        self._transaction_id = None
        self._moderation_id = None
        self._calibration_id = None
        self._tracking_id = None
        self._f0 = None
        self._state = None
        self._created_at = None
        self._closed_at = None
        self._error = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if original_id is not None:
            self.original_id = original_id
        if conversion_id is not None:
            self.conversion_id = conversion_id
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if moderation_id is not None:
            self.moderation_id = moderation_id
        if calibration_id is not None:
            self.calibration_id = calibration_id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if f0 is not None:
            self.f0 = f0
        if state is not None:
            self.state = state
        if created_at is not None:
            self.created_at = created_at
        if closed_at is not None:
            self.closed_at = closed_at
        if error is not None:
            self.error = error

    @property
    def id(self):
        """Gets the id of this Order.  # noqa: E501

        Unique identifier for the conversion order.  # noqa: E501

        :return: The id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.

        Unique identifier for the conversion order.  # noqa: E501

        :param id: The id of this Order.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this Order.  # noqa: E501

        The user identifier associated with the order.  # noqa: E501

        :return: The user_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Order.

        The user identifier associated with the order.  # noqa: E501

        :param user_id: The user_id of this Order.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def original_id(self):
        """Gets the original_id of this Order.  # noqa: E501

        Identifier for the original recording or file.  # noqa: E501

        :return: The original_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._original_id

    @original_id.setter
    def original_id(self, original_id):
        """Sets the original_id of this Order.

        Identifier for the original recording or file.  # noqa: E501

        :param original_id: The original_id of this Order.  # noqa: E501
        :type: str
        """

        self._original_id = original_id

    @property
    def conversion_id(self):
        """Gets the conversion_id of this Order.  # noqa: E501

        Identifier for the conversion operation.  # noqa: E501

        :return: The conversion_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._conversion_id

    @conversion_id.setter
    def conversion_id(self, conversion_id):
        """Sets the conversion_id of this Order.

        Identifier for the conversion operation.  # noqa: E501

        :param conversion_id: The conversion_id of this Order.  # noqa: E501
        :type: str
        """

        self._conversion_id = conversion_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Order.  # noqa: E501

        Transaction identifier associated with the order (if applicable).  # noqa: E501

        :return: The transaction_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Order.

        Transaction identifier associated with the order (if applicable).  # noqa: E501

        :param transaction_id: The transaction_id of this Order.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def moderation_id(self):
        """Gets the moderation_id of this Order.  # noqa: E501

        Moderation identifier associated with the order (if applicable).  # noqa: E501

        :return: The moderation_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._moderation_id

    @moderation_id.setter
    def moderation_id(self, moderation_id):
        """Sets the moderation_id of this Order.

        Moderation identifier associated with the order (if applicable).  # noqa: E501

        :param moderation_id: The moderation_id of this Order.  # noqa: E501
        :type: str
        """

        self._moderation_id = moderation_id

    @property
    def calibration_id(self):
        """Gets the calibration_id of this Order.  # noqa: E501

        Calibration identifier used in the conversion process (if applicable).  # noqa: E501

        :return: The calibration_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._calibration_id

    @calibration_id.setter
    def calibration_id(self, calibration_id):
        """Sets the calibration_id of this Order.

        Calibration identifier used in the conversion process (if applicable).  # noqa: E501

        :param calibration_id: The calibration_id of this Order.  # noqa: E501
        :type: str
        """

        self._calibration_id = calibration_id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this Order.  # noqa: E501

        Tracking identifier for the order.  # noqa: E501

        :return: The tracking_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this Order.

        Tracking identifier for the order.  # noqa: E501

        :param tracking_id: The tracking_id of this Order.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def f0(self):
        """Gets the f0 of this Order.  # noqa: E501

        Fundamental frequency adjustment applied to the conversion (if any).  # noqa: E501

        :return: The f0 of this Order.  # noqa: E501
        :rtype: float
        """
        return self._f0

    @f0.setter
    def f0(self, f0):
        """Sets the f0 of this Order.

        Fundamental frequency adjustment applied to the conversion (if any).  # noqa: E501

        :param f0: The f0 of this Order.  # noqa: E501
        :type: float
        """

        self._f0 = f0

    @property
    def state(self):
        """Gets the state of this Order.  # noqa: E501

        The current state of the conversion order.  # noqa: E501

        :return: The state of this Order.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Order.

        The current state of the conversion order.  # noqa: E501

        :param state: The state of this Order.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this Order.  # noqa: E501

        Timestamp when the order was created.  # noqa: E501

        :return: The created_at of this Order.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Order.

        Timestamp when the order was created.  # noqa: E501

        :param created_at: The created_at of this Order.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def closed_at(self):
        """Gets the closed_at of this Order.  # noqa: E501

        Timestamp when the order was closed (if applicable).  # noqa: E501

        :return: The closed_at of this Order.  # noqa: E501
        :rtype: datetime
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this Order.

        Timestamp when the order was closed (if applicable).  # noqa: E501

        :param closed_at: The closed_at of this Order.  # noqa: E501
        :type: datetime
        """

        self._closed_at = closed_at

    @property
    def error(self):
        """Gets the error of this Order.  # noqa: E501

        Error message related to the order (if any).  # noqa: E501

        :return: The error of this Order.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Order.

        Error message related to the order (if any).  # noqa: E501

        :param error: The error of this Order.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
