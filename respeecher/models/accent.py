# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Accent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_default': 'bool',
        'native': 'bool',
        'info': 'AccentInfo',
        'tiers': 'list[Tier]',
        'available': 'bool',
        'settings': 'object'
    }

    attribute_map = {
        'id': 'id',
        'is_default': 'is_default',
        'native': 'native',
        'info': 'info',
        'tiers': 'tiers',
        'available': 'available',
        'settings': 'settings'
    }

    def __init__(self, id=None, is_default=None, native=None, info=None, tiers=None, available=None, settings=None):  # noqa: E501
        """Accent - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_default = None
        self._native = None
        self._info = None
        self._tiers = None
        self._available = None
        self._settings = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if is_default is not None:
            self.is_default = is_default
        if native is not None:
            self.native = native
        if info is not None:
            self.info = info
        if tiers is not None:
            self.tiers = tiers
        if available is not None:
            self.available = available
        if settings is not None:
            self.settings = settings

    @property
    def id(self):
        """Gets the id of this Accent.  # noqa: E501


        :return: The id of this Accent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Accent.


        :param id: The id of this Accent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this Accent.  # noqa: E501


        :return: The is_default of this Accent.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Accent.


        :param is_default: The is_default of this Accent.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def native(self):
        """Gets the native of this Accent.  # noqa: E501


        :return: The native of this Accent.  # noqa: E501
        :rtype: bool
        """
        return self._native

    @native.setter
    def native(self, native):
        """Sets the native of this Accent.


        :param native: The native of this Accent.  # noqa: E501
        :type: bool
        """

        self._native = native

    @property
    def info(self):
        """Gets the info of this Accent.  # noqa: E501


        :return: The info of this Accent.  # noqa: E501
        :rtype: AccentInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Accent.


        :param info: The info of this Accent.  # noqa: E501
        :type: AccentInfo
        """

        self._info = info

    @property
    def tiers(self):
        """Gets the tiers of this Accent.  # noqa: E501


        :return: The tiers of this Accent.  # noqa: E501
        :rtype: list[Tier]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """Sets the tiers of this Accent.


        :param tiers: The tiers of this Accent.  # noqa: E501
        :type: list[Tier]
        """

        self._tiers = tiers

    @property
    def available(self):
        """Gets the available of this Accent.  # noqa: E501


        :return: The available of this Accent.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Accent.


        :param available: The available of this Accent.  # noqa: E501
        :type: bool
        """

        self._available = available

    @property
    def settings(self):
        """Gets the settings of this Accent.  # noqa: E501


        :return: The settings of this Accent.  # noqa: E501
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Accent.


        :param settings: The settings of this Accent.  # noqa: E501
        :type: object
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Accent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Accent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
