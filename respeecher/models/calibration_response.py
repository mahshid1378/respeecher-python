# coding: utf-8

"""
    Respeecher API

    API for interacting with Respeecher services, including key and session management, and calibration functionalities.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalibrationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'user_id': 'str',
        'f0': 'int',
        'algorithm': 'str',
        'bucket': 'str',
        'key': 'str',
        'state': 'str',
        'error': 'str',
        'created_at': 'datetime',
        'calibrated_at': 'datetime',
        'enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'user_id': 'user_id',
        'f0': 'f0',
        'algorithm': 'algorithm',
        'bucket': 'bucket',
        'key': 'key',
        'state': 'state',
        'error': 'error',
        'created_at': 'created_at',
        'calibrated_at': 'calibrated_at',
        'enabled': 'enabled'
    }

    def __init__(self, id=None, name=None, user_id=None, f0=None, algorithm=None, bucket=None, key=None, state=None, error=None, created_at=None, calibrated_at=None, enabled=None):  # noqa: E501
        """CalibrationResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._user_id = None
        self._f0 = None
        self._algorithm = None
        self._bucket = None
        self._key = None
        self._state = None
        self._error = None
        self._created_at = None
        self._calibrated_at = None
        self._enabled = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if user_id is not None:
            self.user_id = user_id
        if f0 is not None:
            self.f0 = f0
        if algorithm is not None:
            self.algorithm = algorithm
        if bucket is not None:
            self.bucket = bucket
        if key is not None:
            self.key = key
        if state is not None:
            self.state = state
        if error is not None:
            self.error = error
        if created_at is not None:
            self.created_at = created_at
        if calibrated_at is not None:
            self.calibrated_at = calibrated_at
        if enabled is not None:
            self.enabled = enabled

    @property
    def id(self):
        """Gets the id of this CalibrationResponse.  # noqa: E501


        :return: The id of this CalibrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalibrationResponse.


        :param id: The id of this CalibrationResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CalibrationResponse.  # noqa: E501


        :return: The name of this CalibrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalibrationResponse.


        :param name: The name of this CalibrationResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_id(self):
        """Gets the user_id of this CalibrationResponse.  # noqa: E501


        :return: The user_id of this CalibrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CalibrationResponse.


        :param user_id: The user_id of this CalibrationResponse.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def f0(self):
        """Gets the f0 of this CalibrationResponse.  # noqa: E501


        :return: The f0 of this CalibrationResponse.  # noqa: E501
        :rtype: int
        """
        return self._f0

    @f0.setter
    def f0(self, f0):
        """Sets the f0 of this CalibrationResponse.


        :param f0: The f0 of this CalibrationResponse.  # noqa: E501
        :type: int
        """

        self._f0 = f0

    @property
    def algorithm(self):
        """Gets the algorithm of this CalibrationResponse.  # noqa: E501


        :return: The algorithm of this CalibrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this CalibrationResponse.


        :param algorithm: The algorithm of this CalibrationResponse.  # noqa: E501
        :type: str
        """

        self._algorithm = algorithm

    @property
    def bucket(self):
        """Gets the bucket of this CalibrationResponse.  # noqa: E501


        :return: The bucket of this CalibrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this CalibrationResponse.


        :param bucket: The bucket of this CalibrationResponse.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def key(self):
        """Gets the key of this CalibrationResponse.  # noqa: E501


        :return: The key of this CalibrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CalibrationResponse.


        :param key: The key of this CalibrationResponse.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def state(self):
        """Gets the state of this CalibrationResponse.  # noqa: E501


        :return: The state of this CalibrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CalibrationResponse.


        :param state: The state of this CalibrationResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def error(self):
        """Gets the error of this CalibrationResponse.  # noqa: E501


        :return: The error of this CalibrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CalibrationResponse.


        :param error: The error of this CalibrationResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def created_at(self):
        """Gets the created_at of this CalibrationResponse.  # noqa: E501


        :return: The created_at of this CalibrationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CalibrationResponse.


        :param created_at: The created_at of this CalibrationResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def calibrated_at(self):
        """Gets the calibrated_at of this CalibrationResponse.  # noqa: E501


        :return: The calibrated_at of this CalibrationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._calibrated_at

    @calibrated_at.setter
    def calibrated_at(self, calibrated_at):
        """Sets the calibrated_at of this CalibrationResponse.


        :param calibrated_at: The calibrated_at of this CalibrationResponse.  # noqa: E501
        :type: datetime
        """

        self._calibrated_at = calibrated_at

    @property
    def enabled(self):
        """Gets the enabled of this CalibrationResponse.  # noqa: E501


        :return: The enabled of this CalibrationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CalibrationResponse.


        :param enabled: The enabled of this CalibrationResponse.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalibrationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalibrationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
